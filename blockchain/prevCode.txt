calls the genesis function to
initialize the blockchain
return &BlockChain{[]*Block{Genesis()}}
the initial InitBlockChain function^

gets the prevblock
prevBlock := chain.Blocks[len(chain.Blocks)-1]
creates a new block based on prevblock hash and ccrr block's
supposed data.
new := CreateBlock(data, prevBlock.Hash)
appends the new block to the existing chain
of blocks (a blockchain.... :OOOOOO)
chain.Blocks = append(chain.Blocks, new)
the initial AddBlock function^

// blockchain initialize
chain := blockchain.InitBlockChain()
// adds three blocks after genesis block
chain.AddBlock("First Block After Genesis")
chain.AddBlock("Second Block After Genesis")
chain.AddBlock("Third Block After Genesis")
// prints prevhash, data, and hash of all blocks
for _, block := range chain.Blocks {
	fmt.Printf("Previous Hash: %x\n", block.PrevHash)
	fmt.Printf("Data in Block: %s\n", block.Data)
	fmt.Printf("Hash: %x\n", block.Hash)
	pow := blockchain.NewProof(block)
	fmt.Printf("PoW: %s\n", strconv.FormatBool(pow.Validate()))
	fmt.Println()
}
the initial main function^